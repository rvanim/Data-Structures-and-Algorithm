#include <iostream>
#include <stack>


using namespace std;

 

class Stack {
    private:
        int top;
        int maxSize;
        int* stackArray;

    public:
        Stack(int size) {
            maxSize = size;
            stackArray = new int[maxSize];
            top = -1;
        }

        ~Stack(){
            delete[] stackArray;
        }

        bool isEmpty(){
            return top == -1;
        }

        bool isFull(){
            return top == maxSize - 1;
        }

        void push(int value){
            if (isFull()){
                cout << "Stack is full, cannot use push function." << endl;
            } else {
                top++;
                cout << "Pushed " << value << " onto the stack." << endl;
                stackArray[top] = value;
            }
        }

        void pop(){
            if(isEmpty()){
                cout << "Stack is empty, cannot use pop function." << endl;
            } else {
                top--;
                cout << "Popped " << stackArray[top + 1] << " from the stack." << endl;
            }
        }
        int peek(){
            if (isEmpty()){
                cout << "Stack is empty, no top element." << endl;
                return -1;
            } else {
                return stackArray[top];
            }
        }

};


int main(){
    Stack stack(5);

    if (stack.isEmpty()) {
        cout << "Is empty?: " << 1 << endl;
    } else {
        cout << "Is empty?: " << 0 << endl;
    }

    stack.push(10);
    stack.push(20);
    stack.push(30);

    if (stack.isFull()) {
        cout << "Is full?: " << 1 << endl;
    } else {
        cout << "Is full?: " << 0 << endl;
    }


    stack.push(40);
    stack.push(50);

    cout << "Top element: " << stack.peek() << endl;

    if (stack.isFull()) {
        cout << "Is full?: " << 1 << endl;
    } else {
        cout << "Is full?: " << 0 << endl;
    }

    stack.pop();
    stack.pop();

    cout << "Top element after popping: " << stack.peek() << endl;;
    stack.push(60);

 

    return 0;

}
